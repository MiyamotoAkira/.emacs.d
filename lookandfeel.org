#+LANGUAGE: en
#+auto_tangle: t

* Look and Feel

*** Font size modifications

#+BEGIN_SRC emacs-lisp
;; font size utilities to handle different screens and dpi
(defun set-size-font (size)
  (set-face-attribute 'default nil :font (concat "Fira Code-" (number-to-string size))))

(defun set-standard-font ()
  (set-size-font 10))

(defun set-sharing-font ()
  (set-size-font 16))

(defun switch-font (universal)
  "Switches the font between my normal one and the one used to share screen"
  (interactive "P")
  (cond ((equal universal nil) (set-standard-font))
        ((equal universal '(4)) (set-sharing-font))
        (t (set-size-font universal))))

(set-standard-font)
#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp
;; This is the theme we are using
(use-package solarized-theme
      :defer nil)

(load-theme 'solarized-dark t)

(defvar current-dark t)

(defun toggle-theme ()
      "Change the theme used on Emacs between a dark and a light themes."
      (interactive)
      (if current-dark
          (load-theme 'solarized-light t)
        (load-theme 'solarized-dark t))
      (setq current-dark (not current-dark)))

;; Doesn't work under Cider. Need to investigate.
(global-set-key (kbd "C-c C-.") 'toggle-theme)

#+END_SRC

*** Highlight Lines
highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package beacon)
#+END_SRC


 #+BEGIN_SRC emacs-lisp
  ;; line numbers
  (global-display-line-numbers-mode)

  ;; We avoid displaying numbers on eshell
  (dolist (mode '(eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; by default highlight the matching paren
(show-paren-mode)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; Use tabs instead of spaces
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; full path in title bar
(setq-default frame-title-format "%b (%f)")
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; no bell
(setq ring-bell-function 'ignore)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Automatically reread from disk if the underlying file changes
(setq auto-revert-interval 1)
(setq auto-revert-check-vc-info t)
(global-auto-revert-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key [remap comment-dwim] #'comment-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ansi-color-faces-vector
      [default default default italic underline success warning error])
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Now selecting a region behaves as in most applications
;; you overwrite the region
(delete-selection-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :defer nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; let's pretify those lambdas
(defun my-pretty-lambda (lambda-string)
  "Make some word or string show as pretty Unicode symbols.  LAMBDA-STRING is the way that the language declares lambda functions."
  (setq prettify-symbols-alist
        ;; λ
        '((lambda-string . 955))))

(defun my-pretty-lambda-elixir ()
  "Make some word or string show as pretty Unicode symbols."
  (setq prettify-symbols-alist
        ;; λ
        '(("fn" . 955))))

(defun my-pretty-lambda-clojure ()
  "Make some word or string show as pretty Unicode symbols."
  (setq prettify-symbols-alist
        ;; λ
        '(("fn" . 955))))

(global-prettify-symbols-mode 1)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; The end of a sentence is a single space.
;; The double space is an old convention
(setq sentence-end-double-space nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; This is the info line at the bottom of a buffer
(use-package spaceline
  :defer nil
  :config
  (spaceline-emacs-theme))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flx
  :defer 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer nil
  :diminish
  :config
  (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Line by line, instead of half-screen at a time.
(use-package smooth-scrolling
  :defer 2
  :config
  (smooth-scrolling-mode 1)
  (setq smooth-scroll-margin 5))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :defer 2
  :config
  (dimmer-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Maybe one day we change this, but don't use the mouse
(use-package disable-mouse
  :defer 2
  :diminish disable-mouse-global-mode
  :config
  (global-disable-mouse-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Favour vertical split over horizontal split
(setq split-height-threshold nil)
(setq split-width-threshold 120)

(defun shell-horizontal ()
  "This function is to display the shell on a horizontal split, whcih is usually more adequate."
  (interactive)
  (let ((split-width-threshold nil)
        (split-height-threshold 0))
    (progn
      (shell)
      (setq current (selected-window))
      (setq window (get-buffer-window "*shell*"))
      (select-window window)
      (setq height (window-height window))
      (shrink-window (- height 10))
      (select-window current))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; All questions are y or n, for consistency
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :defer nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :defer nil
  :hook
  ((dashboard-mode . page-break-lines-mode))
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "May the Force be with you")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5))))
#+END_SRC
